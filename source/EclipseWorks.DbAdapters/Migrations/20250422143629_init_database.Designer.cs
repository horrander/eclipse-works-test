// <auto-generated />
using System;
using EclipseWorks.DbAdapter;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EclipseWorks.DbAdapter.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250422143629_init_database")]
    partial class init_database
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EclipseWorks.Domain.Models.Audit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("modified_at");

                    b.Property<string>("NewValue")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasColumnName("new_value");

                    b.Property<string>("OldValue")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasColumnName("old_value");

                    b.Property<string>("Property")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("property");

                    b.Property<Guid>("TaskItemId")
                        .HasColumnType("uuid")
                        .HasColumnName("task_id");

                    b.HasKey("Id");

                    b.HasIndex("TaskItemId");

                    b.ToTable("audits", (string)null);
                });

            modelBuilder.Entity("EclipseWorks.Domain.Models.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("modified_at");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("removed_at");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("title");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("projects", (string)null);
                });

            modelBuilder.Entity("EclipseWorks.Domain.Models.TaskComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasColumnName("comment");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("modified_at");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("removed_at");

                    b.Property<Guid>("TaskItemId")
                        .HasColumnType("uuid")
                        .HasColumnName("task_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("TaskItemId");

                    b.ToTable("task_comments", (string)null);
                });

            modelBuilder.Entity("EclipseWorks.Domain.Models.TaskItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("DueDate")
                        .IsRequired()
                        .HasColumnType("timestamp")
                        .HasColumnName("due_date");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("modified_at");

                    b.Property<int>("Priority")
                        .HasColumnType("integer")
                        .HasColumnName("priority");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("removed_at");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("tasks", (string)null);
                });

            modelBuilder.Entity("EclipseWorks.Domain.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("modified_at");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("removed_at");

                    b.HasKey("Id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("EclipseWorks.Domain.Models.Audit", b =>
                {
                    b.HasOne("EclipseWorks.Domain.Models.TaskItem", null)
                        .WithMany("Audits")
                        .HasForeignKey("TaskItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EclipseWorks.Domain.Models.Project", b =>
                {
                    b.HasOne("EclipseWorks.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EclipseWorks.Domain.Models.TaskComment", b =>
                {
                    b.HasOne("EclipseWorks.Domain.Models.TaskItem", null)
                        .WithMany("Comments")
                        .HasForeignKey("TaskItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EclipseWorks.Domain.Models.TaskItem", b =>
                {
                    b.HasOne("EclipseWorks.Domain.Models.Project", null)
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EclipseWorks.Domain.Models.Project", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("EclipseWorks.Domain.Models.TaskItem", b =>
                {
                    b.Navigation("Audits");

                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
